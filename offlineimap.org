#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:2 p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: Using OAuth wtih offlineimap and notmuch to read and send gmail
#+DATE: <2017-07-04 12:16:40 Tuesday>
#+AUTHOR: George M Jones
#+EMAIL: gmj@pobox.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.50.1 (Org mode 8.3.4)

* Install offline IMAP
  Offline imap now has OAuth2 support built in
   #+begin_example
   apt-get install offlineimap
   #+end_example
* Set up and configure Gmail with offlineimap and OAuth2
** Setup and config files
   Here are the config files and steps for myself and others to include later
   versions of myself...
*** Create Google ClientID and Secret for use generating OAuth tokens
    Mostly per instructions here http://christop.club/2014/01/19/sup/, 
**** Create A Project
    - Go to the Google Developers Console
      https://console.cloud.google.com/
    - Create a new project, make note of name
**** Create Credentials
    - Go to the API console
      https://console.cloud.google.com/apis/dashboard?project=YOURPROJECT
    - Select "Create Credentials" > OAuth client ID"
      + Select "Application Type 'other'"
    - fill in name, e.g. "offlineimap""
    - IMPORTANT: Save "client ID" and "client secret" for use below
**** Grab oauth2.py here
      #+begin_example
      git clone https://github.com/google/gmail-oauth2-tools
      #+end_example

**** Generate an access token
***** run oauth2.py with client_id and client_secret from above   
    #+begin_example
    python/oauth2.py   --generate_oauth2_token  \
                       --client_id=xxx.apps.googleusercontent.com \
                       --client_secret=XXX
    #+end_example
    - Open the URL output to get a verification code
    #+begin_example
    To authorize token, visit this url and follow the directions:
    https://accounts.google.com/o/oauth2/auth?client_id=XXX.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&response_type=code&scope=https%3A%2F%2Fmail.google.com%2F
    #+end_example
    - Paste in the verification code from the web page
    #+begin_example
    Enter verification code: PASTE-CODE-FROM-WEB-PAGE-HERE
    #+end_example
    - Save the Refresh and access tokens generated
    #+begin_example
    Refresh Token: XXX-SAVE-TEHSE
    Access Token: XXX-SAVE-THESE
    Access Token Expiration Seconds: 3600
    #+end_example
** Create and ~/.offlineimaprc file for GMAIL
    Add the apprpriate client_id, secrete and token from above
    Mine currently looks like this:

    #+begin_example
# Sample minimal config file.  Copy this to ~/.offlineimaprc and edit to
# get started fast.

[general]
accounts = gmj
ii = ttyui

[Account gmj]
localrepository = gmjLocal
remoterepository = gmjRemote
postsynchook = ~/rc.local/notmuch-hook.sh # run 'notmuch new' and tagging

[Repository gmjLocal]
type = Maildir
localfolders = ~/Mail/gmj

[Repository gmjRemote]
#
# Who are they?
#
type = Gmail
sslcacertfile = /etc/ssl/certs/ca-certificates.crt  

#
# Who are we ?
#
remoteuser = me@example.com
auth_mechanisms = XOAUTH2
#oauth2_request_url = https://accounts.google.com/o/oauth2/token
oauth2_client_id = ###-aaaaaaaaaaaaaaaaaaaaaaaaaa0.apps.googleusercontent.com
oauth2_client_secret = aaaa-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
oauth2_refresh_token = #/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

#
# What folders do we want to sync?
#

folderfilter = lambda foldername: re.search('(^foo|^emacs|^2017)', foldername)
#+end_example

** Gmail filter (optional)
   I set up a gmail filter that will *never match anything* and tag
   all incomming non-matching messages (e.g. everything) with the
   current year.  Tagged items in gmail look like folders in imap.
   So I just have imap download things with the current year (see
   =folderfilter=) in =.offlineimaprc= above.

*** Do a dry run
    Consider using the =--dry-run= option the first time. You will get
    errors if he local folders do not exist, but if you get past
    "Establishing connection", it means at least auth is working

    #+begin_example
george@octo ~ $ offlineimap --dry-run -a eludom
OfflineIMAP 7.0.0
  Licensed under the GNU GPL v2 or any later version (with an OpenSSL exception)
Account sync eludom:
 *** Processing account eludom
 Establishing connection to imap.gmail.com:993
 [DRYRUN] Creating folder 2016[eludomLocal]    
    #+end_example

*** Run with IMAP debugging

    You can run with imap debugging turned on to see more of what's happening.

    #+begin_example
    george@octo ~ $ offlineimap --d imap
    #+end_example

*** Do the initial sync
    #+begin_example
george@octo securityfoo [master] $ offlineimap
george@octo securityfoo [master] $ 
OfflineIMAP 7.0.0
  Licensed under the GNU GPL v2 or any later version (with an OpenSSL exception)
... Processing account Fooologist
Establishing connection to imap.gmail.com:993
Creating folder 2015[FooologistLocal]
Creating folder 2016[FooologistLocal]
Creating new Local Status db for FooologistLocal:2015
Syncing 2015: Gmail -> Maildir
Creating new Local Status db for FooologistLocal:2016
Syncing 2016: Gmail -> Maildir
Copy message UID 1 (1/2364) FooologistRemote:2015 -> FooologistLocal
Copy message UID 2 (2/2364) FooologistRemote:2015 -> FooologistLocal
Copy message UID 3 (3/2364) FooologistRemote:2015 -> FooologistLocal
Copy message UID 141 (1/1365) FooologistRemote:2016 -> FooologistLocal
...
Copy message UID 2363 (2363/2364) FooologistRemote:2015 -> FooologistLocal
Copy message UID 2364 (2364/2364) FooologistRemote:2015 -> FooologistLocal
...Finished account 'Fooologist' in 15:33
george@octo securityfoo [master] $
    #+end_example

** Useful Links
   - https://github.com/OfflineIMAP/offlineimap
   - https://notmuchmail.org/
   - Basic .~/offlineimaprc example
   - Advanced .~/offlineimaprc example
   - Offlineimap .conf file that mentions OAuth2 :: https://github.com/OfflineIMAP/offlineimap/blob/master/offlineimap.conf
   - Usable advice on creating OAuth2 tokens :: http://christop.club/2014/01/19/sup/
   - https://gist.github.com/dabrahams/3030332

* Sending Gmail
  My current .authinfo.gpg looks like this and seems to work.
** .authinfo.gpg
   #+begin_example
   machine gmail-ephemeral login me@example.com password APP-PASSWORD
   machine smtp.gmail.com login me@example.com port 587  password APP-PASSOWRD
   machine gmail login me@example.com password APP-PASSWORD
   #+end_example
  - Earlier versions had the username and password and used plain plain  authentication.
  - The account I'm setting up now uses two-factor authentication.  To
    make this work, I had to set up an app-password per
    https://support.google.com/accounts/answer/185833?hl=en
    and use that in my .authinfo.gpg

* tagging mail when offlineimap runs

  I have this
  #+begin_example
  postsynchook = ~/rc.local/notmuch-hook.sh # run 'notmuch new' and tagging  
  #+end_example

  in my =.offlineimaprc=, which runs this script to post-process/tag
  my mail upon arrival

  #+begin_example
#! /bin/sh

echo ""==== Running notmuch new at `date` ====""

notmuch new

echo Adding notmuch tags
# See http://chrisdone.com/posts/emacs-mail

notmuch tag +admin from:thing1
notmuch tag +person from:thing2
echo ""==== Done ====""
echo
echo

#+end_example

* crontab
  I have a simple contab entry that runs offline imap
  #+begin_example
  0 * * * * /usr/bin/offlineimap >> /home/george/logs/offlineimap.log 2>&1
  #+end_example
